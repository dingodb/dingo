# This is a basic workflow to help you get started with Actions

name: CI

# Controls when the workflow will run
on:
  # Triggers the workflow on push or pull request events but only for the main branch
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]

  # Allows you to run this workflow manually from the Actions tab
  workflow_dispatch:

env:
  IMAGE_NAME: dingo-ubuntu

# A workflow run is made up of one or more jobs that can run sequentially or in parallel
jobs:
  # This workflow contains a single job called "build"
  build:
    # The type of runner that the job will run on
    runs-on: ubuntu-latest
    permissions:
      packages: write
      contents: read

    # Steps represent a sequence of tasks that will be executed as part of the job
    steps:
      # Checks-out your repository under $GITHUB_WORKSPACE, so your job can access it
      - uses: actions/checkout@v2

      # Runs a single command using the runners shell
      - name: Set up JDK 8
        uses: actions/setup-java@v2
        with:
          java-version: '8'
          distribution: 'adopt'

      - name: Validate Gradle wrapper
        uses: gradle/wrapper-validation-action@e6e38bacfdf1a337459f332974bb2327a31aaf4b

      - name: Build with Gradle
        run: ./gradlew build

      # Remove some files from the Gradle cache, so they aren't cached by GitHub Actions.
      # Restoring these files from a GitHub Actions cache might cause problems for future builds.
      - name: Cleanup Gradle Cache
        run: |
          rm -f ~/.gradle/caches/modules-2/modules-2.lock
          rm -f ~/.gradle/caches/modules-2/gc.properties

          #release:
          #  needs: [build]
          #  # The type of runner that the job will run on
          #  runs-on: ubuntu-latest
          #  permissions:
          #    packages: write
          #    contents: read

          #  # Use a trick method to trigger build image
          #  if: "contains(github.head_ref, 'main')"
          #  # Steps represent a sequence of tasks that will be executed as part of the job
          #  steps:
          #    # Build Docker Image
          #    - name: Build image
          #      run: docker build . --file ./docker/Dockerfile --tag $IMAGE_NAME --label "runnumber=${GITHUB_RUN_ID}"

          #    - name: Log in to registry
          #      # This is where you will update the PAT to GITHUB_TOKEN
          #      run: echo "${{ secrets.GITHUB_TOKEN }}" | docker login ghcr.io -u ${{ github.actor }} --password-stdin

          #    - name: Push image
          #      run: |
          #        IMAGE_ID=ghcr.io/${{ github.repository_owner }}/$IMAGE_NAME

          #        # Change all uppercase to lowercase
          #        IMAGE_ID=$(echo $IMAGE_ID | tr '[A-Z]' '[a-z]')
          #        # Strip git ref prefix from version
          #        VERSION=$(echo "${{ github.ref }}" | sed -e 's,.*/\(.*\),\1,')
          #        # Strip "v" prefix from tag name
          #        [[ "${{ github.ref }}" == "refs/tags/"* ]] && VERSION=$(echo $VERSION | sed -e 's/^v//')
          #        # Use Docker `latest` tag convention
          #        [ "$VERSION" == "master" ] && VERSION=latest
          #        echo IMAGE_ID=$IMAGE_ID
          #        echo VERSION=$VERSION
          #        docker tag $IMAGE_NAME $IMAGE_ID:$VERSION
          #        docker push $IMAGE_ID:$VERSION
