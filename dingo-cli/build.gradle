/*
 * Copyright 2021 DataCanvas
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

plugins {
    id 'java-conventions'
    id 'java-library'
    id "com.gorylenko.gradle-git-properties" version "${gradleGitCommitVersion}"
    id "com.github.johnrengelman.shadow" version "5.0.0"
}

repositories {
    maven {
        url 'http://packages.confluent.io/maven/'
    }
    mavenCentral()
}

configurations {
    compile.exclude(group: 'log4j', module: 'log4j')
    compile.exclude(group: 'org.slf4j', module: 'slf4j-log4j12')
}

dependencies {
    implementation group: 'com.beust', name: 'jcommander', version: 'jcommander'.v()
    implementation group: 'sqlline', name: 'sqlline', version: 'sqlline'.v()
    implementation group: 'org.apache.commons', name: 'commons-csv', version: 'commons-csv'.v()
    implementation group: 'com.fasterxml.jackson.dataformat', name: 'jackson-dataformat-csv', version: 'jackson'.v()
    implementation group: 'org.apache.kafka', name: 'kafka-clients', version: 'kafka'.v()
    implementation group: 'io.confluent', name: 'kafka-avro-serializer', version: 'confluent'.v()
    compile group: 'org.codehaus.jackson', name: 'jackson-mapper-asl', version: '1.8.8'
    implementation group: 'com.googlecode.json-simple', name: 'json-simple', version: '1.1.1'

    implementation project(":dingo-sdk")
    implementation project(":dingo-common")
    implementation project(":dingo-calcite")
    implementation project(":dingo-driver-client")
    implementation project(":dingo-driver")
    implementation project(":dingo-net-netty")
    implementation project(":dingo-server:dingo-server-client")
    implementation project(":dingo-server:dingo-server-protocol")
    implementation project(':dingo-server:dingo-server-driver-proxy')
    implementation project(':dingo-verify')
}

shadowJar {
    classifier 'all'
    exclude "META-INF/SF"
    exclude "META-INF/DSA"
    exclude "META-INF/RSA"
    mergeServiceFiles {
        path = 'META-INF/services/io.dingodb.net.service.AuthService$Provider'
    }
    with jar
}

shadowJar.dependsOn([
    ':dingo-driver-client:fatJar',
    ':dingo-server:dingo-server-driver-proxy:jar'
])

tasks.named("build") { x ->
    x.finalizedBy("shadowJar")
}
