plugins {
    id 'java-conventions'
    id 'java-library'
    id "com.gorylenko.gradle-git-properties" version "${gradleGitCommitVersion}"
    id 'maven-publish'
}

apply plugin: 'maven'
apply plugin: 'signing'

dependencies {
    implementation group: 'org.projectlombok', name: 'lombok', version: 'lombok'.v()
    implementation group: 'org.apache.commons', name: 'commons-lang3', version: 'commons-lang3'.v()
    implementation group: 'javax.validation', name: 'validation-api', version: 'validation'.v()
    implementation group: 'com.fasterxml.jackson.dataformat', name: 'jackson-dataformat-yaml', version: 'jackson'.v()
    implementation group: 'org.luaj', name: 'luaj-jse', version: 'luaj'.v()
    implementation group: 'com.google.guava', name: 'guava', version: 'guava'.v()
    annotationProcessor group: 'org.projectlombok', name: 'lombok', version: 'lombok'.v()
    annotationProcessor group: 'com.google.auto.service', name: 'auto-service', version: 'auto-service'.v()
    compileOnly group: 'com.google.auto.service', name: 'auto-service', version: 'auto-service'.v()

    compile project(":dingo-common")
    compile project(":dingo-cluster-api")
    compile project(":dingo-meta-api")
    compile project(":dingo-net-netty")
    compile project(":dingo-server:dingo-server-protocol")
    compile project(":dingo-net-api")
    compile project(":dingo-server:dingo-server-client")
    compile project(":dingo-verify")
    testImplementation group: 'org.mockito', name: 'mockito-core', version: 'mockito'.v()
}

test {
    useJUnitPlatform()
}

javadoc {
    exclude "org/apache/calcite/**"
    source = sourceSets.main.allJava
}

task fatJar(type: Jar) {
    classifier 'all'
    from(
        configurations.runtimeClasspath.collect { it.isDirectory() ? it : zipTree(it) },
    )
    with jar

    exclude "META-INF/*.SF"
    exclude "META-INF/*.DSA"
    exclude "META-INF/*.RSA"
}

fatJar.dependsOn(
    ':dingo-cluster-api:jar',
    ':dingo-meta-api:jar',
    ':dingo-expr:dingo-expr-runtime:jar',
    ':dingo-expr:dingo-expr-json-runtime:jar',
    ':dingo-store-api:jar',
    ':dingo-serial:jar',
    ':dingo-server:dingo-server-client:jar',
    ':dingo-net-netty:jar'
)

tasks.named("build") { x ->
    x.finalizedBy("fatJar")
}

task javadocJar(type: Jar) {
    classifier = 'javadoc'
    from javadoc
}

task sourcesJar(type: Jar) {
    classifier = 'sources'
    from sourceSets.main.allSource
}

artifacts {
    archives javadocJar, sourcesJar
}

project.gradle.taskGraph.whenReady { graph ->
    project.tasks.findAll().forEach { task ->
        if (task.name.contains("signArchives")) {
            task.enabled = false
        }
    }
}

signing {
    sign configurations.archives
}

publishing {
    repositories {
        maven {
            name = "OSSRH"
            def releasesRepoUrl = "https://s01.oss.sonatype.org/service/local/staging/deploy/maven2/"
            def snapshotsRepoUrl = "https://s01.oss.sonatype.org/content/repositories/snapshots/"

            /**
             * will manually release the artifactory
             */
            url = version.endsWith('SNAPSHOT') ? snapshotsRepoUrl : "";

            credentials {
                username = System.getenv("MAVEN_USERNAME")
                password = System.getenv("MAVEN_TOKEN")
            }
        }
    }

    publications {
        maven(MavenPublication) {
            groupId = 'io.dingodb'
            artifactId = 'dingo-sdk'
            artifacts = [ fatJar, javadocJar, sourcesJar ]
        }
    }
}

uploadArchives {
    repositories {
        mavenDeployer {
            beforeDeployment { MavenDeployment deployment -> signing.signPom(deployment) }

            repository(url: "https://s01.oss.sonatype.org/service/local/staging/deploy/maven2/") {
                authentication(userName: ossrhUsername, password: ossrhPassword)
            }

            pom.project {
                name 'dingo-sdk'
                packaging 'jar'
                // optionally artifactId can be defined here
                description 'A sdk library to do operation on dingo cluster'
                url 'http://www.dingodb.datacanvas.com/'

                scm {
                    connection 'scm:svn:http://foo.googlecode.com/svn/trunk/'
                    developerConnection 'scm:svn:https://foo.googlecode.com/svn/trunk/'
                    url 'http://foo.googlecode.com/svn/trunk/'
                }

                licenses {
                    license {
                        name 'The Apache License, Version 2.0'
                        url 'http://www.apache.org/licenses/LICENSE-2.0.txt'
                    }
                }

                developers {
                    developer {
                        id 'dingodb'
                        name 'DingoDB develop team'
                        email 'dingodb@zetyun.com'
                    }
                }
            }
        }
    }
}
