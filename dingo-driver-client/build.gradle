/*
 * Copyright 2021 DataCanvas
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

plugins {
    id 'java-conventions'
    id 'java-library'
    id "com.gorylenko.gradle-git-properties" version "${gradleGitCommitVersion}"
    id 'maven-publish'
}

dependencies {
    implementation group: 'org.apache.calcite.avatica', name: 'avatica-core', version: 'avatica'.v()
}

task fatJar(type: Jar) {
    classifier 'all'
    from(
        configurations.runtimeClasspath.collect { it.isDirectory() ? it : zipTree(it) },
    )
    with jar

    exclude "META-INF/*.SF"
    exclude "META-INF/*.DSA"
    exclude "META-INF/*.RSA"
}

jar {
    // To build a Fat Jar we have to alter jar task's default behaviour.
    // Following lines will iterate over runtime dependencies of this project
    // and if a dependency is a directory (for example src/) it will add it
    // directly. If a dependency is a zip or jar file it will unpack those
    // files and adds its content to the final jar file.
    from configurations.runtimeClasspath.collect { it.isDirectory() ? it : zipTree(it) }
}

tasks.named("build") { x ->
    x.finalizedBy("fatJar")
}

publishing {
    repositories {
        maven {
            name = "GitHubPackages"
            url = uri("https://maven.pkg.github.com/" + System.getenv("GITHUB_ACTOR") + "/dingo")
            credentials {
                username = System.getenv("GITHUB_ACTOR")
                password = System.getenv("GITHUB_TOKEN")
            }
        }
    }

    publications {
        maven(MavenPublication) {
            groupId = 'io.dingodb'
            artifactId = 'dingo-driver-client'
            artifacts = [ jar ]
        }
    }
}
