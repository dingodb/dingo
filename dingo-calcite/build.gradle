/*
 * Copyright 2021 DataCanvas
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

buildscript {
    repositories {
        maven {
            url "https://plugins.gradle.org/m2/"
        }
    }
    dependencies {
        classpath "ca.coglinc:javacc-gradle-plugin:2.4.0"
    }
}

plugins {
    id 'java-conventions'
    id 'java-library'
    id "ca.coglinc.javacc" version "2.4.0"
}

configurations {
    fmppTask
}

dependencies {
    annotationProcessor group: 'org.immutables', name: 'value', version: 'immutables'.v()
    api group: 'org.apache.calcite', name: 'calcite-core', version: 'calcite'.v()
    api project(':dingo-exec')
    compileOnly group: 'org.immutables', name: 'value', version: 'immutables'.v()
    implementation project(':dingo-expr:dingo-expr-parser')
    implementation project(':dingo-func-api')
    testAnnotationProcessor group: 'com.google.auto.service', name: 'auto-service', version: 'auto-service'.v()
    testCompileOnly group: 'com.google.auto.service', name: 'auto-service', version: 'auto-service'.v()
    testImplementation group: 'org.mockito', name: 'mockito-core', version: 'mockito'.v()
    testImplementation project(':dingo-test')

    fmppTask "com.googlecode.fmpp-maven-plugin:fmpp-maven-plugin:1.0"
    fmppTask "org.freemarker:freemarker:2.3.31"
}

apply plugin: "ca.coglinc.javacc"

sourceSets {
    main {
        java {
            srcDir compileJavacc.outputDirectory
        }
    }
}

task copyFmppTemplatesFromSrc(type: Copy) {
    from "src/main/codegen"
    into "${project.buildDir}/templates-fmpp/codegen"
}

def generateFmppOutputDir = "${project.buildDir}/generated/fmpp"
task generateFmppSources {
    dependsOn configurations.fmppTask
    dependsOn copyFmppTemplatesFromSrc
    doLast {
        ant.taskdef(name: "fmpp", classname: "fmpp.tools.AntTask", classpath: configurations.fmppTask.asPath)
        ant.fmpp(configuration: "${project.buildDir}/templates-fmpp/codegen/config.fmpp", sourceRoot: "${project.buildDir}/templates-fmpp/codegen/templates", outputRoot: generateFmppOutputDir)
    }
}

compileJavacc {
    dependsOn generateFmppSources
    inputDirectory = file(project.buildDir.absolutePath + '/generated/fmpp/javacc')
    outputDirectory = file(project.buildDir.absolutePath + '/generated/javacc/org/apache/calcite/sql/parser/dingo')
}

javadoc {
    exclude "org/apache/calcite/**"
    source = sourceSets.main.allJava
}
